
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chocopy.pa1;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import chocopy.common.astnodes.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ChocoPyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ChocoPyTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public ChocoPyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ChocoPyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ChocoPyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\007\002\000\002\007\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\034\006\000\002\026\015\000\002\026\014\000\002\025" +
    "\015\000\002\025\005\000\002\025\017\000\002\031\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\004\002\000\002\004\004\000\002\033\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\014\002\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\015\004\000\002\015\007\000\002\015\006\000" +
    "\002\015\010\000\002\015\006\000\002\011\007\000\002" +
    "\011\006\000\002\011\005\000\002\010\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\004\000\002\020\003" +
    "\000\002\020\003\000\002\016\003\000\002\017\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\002" +
    "\000\002\021\003\000\002\021\005\000\002\021\004\000" +
    "\002\021\007\000\002\021\005\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\023\003\000\002\023\005\000\002\023\006\000" +
    "\002\023\003\000\002\023\005\000\002\023\006\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\004\000\002\036\006\000\002\035\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\052\002\ufffc\003\ufffc\004\ufffc\007\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\042\ufffc\055\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\001\002\000\004\002\302\001\002" +
    "\000\052\002\ufffb\003\032\004\023\007\043\012\021\013" +
    "\025\014\014\024\030\025\047\026\037\027\017\030\022" +
    "\031\046\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\004\054\277\001\002\000\004" +
    "\002\000\001\002\000\052\002\ufffe\003\ufffe\004\ufffe\007" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\042\ufffe\055\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\056\004\uffe9" +
    "\006\uffe9\016\uffe9\017\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\066\uffe9\067\uffe9\072" +
    "\uffe9\101\uffe9\001\002\000\030\024\030\025\047\026\037" +
    "\027\017\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\056\004\uffaa\006\uffaa\016\uffaa" +
    "\017\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\066\uffaa\067\uffaa\072\uffaa\101\uffaa\001" +
    "\002\000\004\064\053\001\002\000\026\024\030\025\047" +
    "\026\037\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\052\004\uffa5\016\uffa5\017\uffa5" +
    "\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffc4\055\101\060\156" +
    "\061\uffa5\066\uffa5\072\uffa5\101\uffa5\001\002\000\030\024" +
    "\030\025\047\026\037\027\017\042\015\055\012\062\045" +
    "\063\011\064\053\065\041\066\050\001\002\000\052\002" +
    "\ufffd\003\ufffd\004\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\042" +
    "\ufffd\055\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\001\002\000\004\101\uffc7\001\002\000\004\064\053\001" +
    "\002\000\030\024\030\025\047\026\037\027\017\042\015" +
    "\055\012\062\045\063\011\064\053\065\041\066\050\001" +
    "\002\000\004\101\uffc8\001\002\000\032\024\030\025\047" +
    "\026\037\027\017\042\015\055\012\062\045\063\011\064" +
    "\053\065\041\066\050\101\uffca\001\002\000\046\004\uffa6" +
    "\016\uffa6\017\uffa6\041\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffc3" +
    "\061\uffa6\066\uffa6\072\uffa6\101\uffa6\001\002\000\004\054" +
    "\222\001\002\000\056\004\uffee\006\uffee\016\uffee\017\uffee" +
    "\041\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\066\uffee\067\uffee\072\uffee\101\uffee\001\002\000" +
    "\004\101\uffcb\001\002\000\050\002\ufff9\003\ufff9\004\ufff9" +
    "\007\ufff9\012\ufff9\013\ufff9\014\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\040\ufff9\042\ufff9\055\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\001\002\000\052\002\uffff\003" +
    "\uffff\004\uffff\007\uffff\012\uffff\013\uffff\014\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\042\uffff\055" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\001\002" +
    "\000\050\004\uffa7\016\uffa7\017\uffa7\041\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffc2\055\076\061\uffa7\066\uffa7\072\uffa7\101" +
    "\uffa7\001\002\000\056\004\uffad\006\uffad\016\uffad\017\uffad" +
    "\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\066\uffad\067\uffad\072\uffad\101\uffad\001\002\000" +
    "\046\002\ufffa\003\141\004\023\007\043\012\021\013\025" +
    "\014\014\024\030\025\047\026\037\027\017\042\015\055" +
    "\012\062\045\063\011\064\053\065\041\066\050\001\002" +
    "\000\056\004\uffec\006\uffec\016\uffec\017\uffec\041\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\056\uffec\057\uffec\060\uffec\061\uffec\066" +
    "\uffec\067\uffec\072\uffec\101\uffec\001\002\000\042\004\uffba" +
    "\006\uffba\016\uffba\017\uffba\046\205\047\204\050\207\051" +
    "\206\052\212\053\211\056\uffba\057\uffba\060\uffba\067\uffba" +
    "\072\210\101\uffba\001\002\000\056\004\uffea\006\uffea\016" +
    "\uffea\017\uffea\041\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\066\uffea\067\uffea\072\uffea\101\uffea" +
    "\001\002\000\056\004\uffb5\006\uffb5\016\uffb5\017\uffb5\041" +
    "\171\043\170\044\173\045\167\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\174\066\172\067\uffb5\072\uffb5\101\uffb5\001\002\000\030" +
    "\024\030\025\047\026\037\027\017\042\015\055\012\062" +
    "\045\063\011\064\053\065\041\066\050\001\002\000\012" +
    "\004\067\016\066\017\070\101\uffc6\001\002\000\056\004" +
    "\uffeb\006\uffeb\016\uffeb\017\uffeb\041\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\066\uffeb\067\uffeb" +
    "\072\uffeb\101\uffeb\001\002\000\006\003\105\064\053\001" +
    "\002\000\056\004\uffed\006\uffed\016\uffed\017\uffed\041\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\066\uffed\067\uffed\072\uffed\101\uffed\001\002\000\034\024" +
    "\030\025\047\026\037\027\017\042\015\055\012\057\uffbb" +
    "\062\045\063\011\064\053\065\041\066\050\067\uffbb\001" +
    "\002\000\004\101\054\001\002\000\050\002\ufff7\003\ufff7" +
    "\004\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\040\ufff7\042\ufff7\055\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002\000\064\004" +
    "\uffe6\006\uffe6\015\uffe6\016\uffe6\017\uffe6\041\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\066\uffe6\067\uffe6\072\uffe6\101\uffe6\001\002\000" +
    "\050\002\uffd4\003\uffd4\004\uffd4\007\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\040\uffd4\042" +
    "\uffd4\055\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\016\004\067\016\066\017\070\056\uffbe\057" +
    "\uffbe\067\uffbe\001\002\000\060\004\uffa5\006\uffa5\016\uffa5" +
    "\017\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\101\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\066\uffa5\067\uffa5\072\uffa5\101" +
    "\uffa5\001\002\000\056\004\uffa6\006\uffa6\016\uffa6\017\uffa6" +
    "\041\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\066\uffa6\067\uffa6\072\uffa6\101\uffa6\001\002\000" +
    "\060\004\uffa7\006\uffa7\016\uffa7\017\uffa7\041\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\055\076\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\066\uffa7\067\uffa7\072\uffa7\101\uffa7\001\002\000\006\057" +
    "\063\067\062\001\002\000\056\004\uffa9\006\uffa9\016\uffa9" +
    "\017\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\066\uffa9\067\uffa9\072\uffa9\101\uffa9\001" +
    "\002\000\032\003\065\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\016\004\067\016\066\017\070\056\uffbc" +
    "\057\uffbc\067\uffbc\001\002\000\010\056\uffbd\057\uffbd\067" +
    "\uffbd\001\002\000\030\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\030\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\030\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\024\004\uffb6\006\uffb6\016\066\017\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\067\uffb6\101\uffb6\001\002\000" +
    "\012\004\067\006\073\016\066\017\070\001\002\000\030" +
    "\024\030\025\047\026\037\027\017\042\015\055\012\062" +
    "\045\063\011\064\053\065\041\066\050\001\002\000\024" +
    "\004\067\006\uffb7\016\066\017\070\056\uffb7\057\uffb7\060" +
    "\uffb7\067\uffb7\101\uffb7\001\002\000\024\004\uffb9\006\uffb9" +
    "\016\uffb9\017\uffb9\056\uffb9\057\uffb9\060\uffb9\067\uffb9\101" +
    "\uffb9\001\002\000\034\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\056\uffbb\057\uffbb\062\045\063\011\064" +
    "\053\065\041\066\050\001\002\000\006\056\100\057\063" +
    "\001\002\000\056\004\uffa8\006\uffa8\016\uffa8\017\uffa8\041" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\056\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\066\uffa8\067\uffa8\072\uffa8\101\uffa8\001\002\000\034" +
    "\024\030\025\047\026\037\027\017\042\015\055\012\056" +
    "\uffbb\057\uffbb\062\045\063\011\064\053\065\041\066\050" +
    "\001\002\000\006\056\103\057\063\001\002\000\056\004" +
    "\uffab\006\uffab\016\uffab\017\uffab\041\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\066\uffab\067\uffab" +
    "\072\uffab\101\uffab\001\002\000\004\055\107\001\002\000" +
    "\004\040\106\001\002\000\060\002\ufff1\003\ufff1\004\ufff1" +
    "\007\ufff1\012\ufff1\013\ufff1\014\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\040\ufff1" +
    "\042\ufff1\055\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\001\002\000\010\056\uffdb\057\uffdb\064\053\001\002" +
    "\000\006\056\uffd8\057\uffd8\001\002\000\004\060\156\001" +
    "\002\000\006\056\114\057\113\001\002\000\006\003\155" +
    "\064\053\001\002\000\006\060\115\070\116\001\002\000" +
    "\004\101\147\001\002\000\010\064\121\065\117\066\122" +
    "\001\002\000\014\054\uffd6\056\uffd6\057\uffd6\060\uffd6\067" +
    "\uffd6\001\002\000\004\060\125\001\002\000\014\054\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\067\uffd5\001\002\000\010\064" +
    "\121\065\117\066\122\001\002\000\004\067\124\001\002" +
    "\000\014\054\uffd7\056\uffd7\057\uffd7\060\uffd7\067\uffd7\001" +
    "\002\000\004\101\126\001\002\000\004\037\127\001\002" +
    "\000\052\003\uffe8\004\uffe8\007\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8" +
    "\034\uffe8\042\uffe8\055\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\001\002\000\052\003\032\004\023\007\043" +
    "\012\021\013\025\014\014\024\030\025\047\026\037\027" +
    "\017\031\046\032\135\034\133\042\015\055\012\062\045" +
    "\063\011\064\053\065\041\066\050\001\002\000\052\003" +
    "\uffe7\004\uffe7\007\uffe7\012\uffe7\013\uffe7\014\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\034\uffe7\042" +
    "\uffe7\055\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\001\002\000\052\003\uffdd\004\uffdd\007\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\042\uffdd\055\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\001\002\000\004\064\053\001\002" +
    "\000\052\003\uffdc\004\uffdc\007\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\034\uffdc\042\uffdc\055\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\001\002\000\004\064\053\001\002\000\046" +
    "\003\141\004\023\007\043\012\021\013\025\014\014\024" +
    "\030\025\047\026\037\027\017\040\140\042\015\055\012" +
    "\062\045\063\011\064\053\065\041\066\050\001\002\000" +
    "\050\004\uffa5\016\uffa5\017\uffa5\041\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffc4\055\101\061\uffa5\066\uffa5\072\uffa5\101\uffa5" +
    "\001\002\000\060\002\ufff0\003\ufff0\004\ufff0\007\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\034\ufff0\040\ufff0\042\ufff0\055" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002" +
    "\000\050\002\ufff6\003\ufff6\004\ufff6\007\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\040\ufff6" +
    "\042\ufff6\055\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\001\002\000\050\002\ufff8\003\ufff8\004\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\040\ufff8\042\ufff8\055\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\001\002\000\004\101\144\001\002\000" +
    "\052\003\uffde\004\uffde\007\uffde\012\uffde\013\uffde\014\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032\uffde\034" +
    "\uffde\042\uffde\055\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\001\002\000\004\101\146\001\002\000\052\003" +
    "\uffdf\004\uffdf\007\uffdf\012\uffdf\013\uffdf\014\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf\034\uffdf\042" +
    "\uffdf\055\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\001\002\000\004\037\150\001\002\000\052\003\uffe8\004" +
    "\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\032\uffe8\034\uffe8\042\uffe8\055" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\001\002" +
    "\000\052\003\032\004\023\007\043\012\021\013\025\014" +
    "\014\024\030\025\047\026\037\027\017\031\046\032\135" +
    "\034\133\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\046\003\141\004\023\007\043" +
    "\012\021\013\025\014\014\024\030\025\047\026\037\027" +
    "\017\040\153\042\015\055\012\062\045\063\011\064\053" +
    "\065\041\066\050\001\002\000\060\002\ufff2\003\ufff2\004" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\034\ufff2\040" +
    "\ufff2\042\ufff2\055\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\001\002\000\006\056\uffd9\057\uffd9\001\002\000" +
    "\006\056\uffda\057\uffda\001\002\000\010\064\121\065\117" +
    "\066\122\001\002\000\010\054\uffef\056\uffef\057\uffef\001" +
    "\002\000\012\004\067\016\066\017\070\060\161\001\002" +
    "\000\004\101\163\001\002\000\050\002\uffd0\003\uffd0\004" +
    "\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\040\uffd0\042\uffd0\055\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000\004\037\164" +
    "\001\002\000\044\003\032\004\023\007\043\012\021\013" +
    "\025\014\014\024\030\025\047\026\037\027\017\042\015" +
    "\055\012\062\045\063\011\064\053\065\041\066\050\001" +
    "\002\000\046\003\141\004\023\007\043\012\021\013\025" +
    "\014\014\024\030\025\047\026\037\027\017\040\166\042" +
    "\015\055\012\062\045\063\011\064\053\065\041\066\050" +
    "\001\002\000\054\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\012\uffcc\013\uffcc\014\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\040\uffcc\042\uffcc\055\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000\026\024\030" +
    "\025\047\026\037\042\015\055\012\062\045\063\011\064" +
    "\053\065\041\066\050\001\002\000\026\024\030\025\047" +
    "\026\037\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\026\024\030\025\047\026\037" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\030\024\030\025\047\026\037\027\017" +
    "\042\015\055\012\062\045\063\011\064\053\065\041\066" +
    "\050\001\002\000\026\024\030\025\047\026\037\042\015" +
    "\055\012\062\045\063\011\064\053\065\041\066\050\001" +
    "\002\000\004\064\053\001\002\000\062\004\uffa2\006\uffa2" +
    "\016\uffa2\017\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\066\uffa2\067" +
    "\uffa2\072\uffa2\101\uffa2\001\002\000\056\004\uff9f\006\uff9f" +
    "\016\uff9f\017\uff9f\041\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\174\066\172\067\uff9f\072\uff9f\101" +
    "\uff9f\001\002\000\012\004\067\016\066\017\070\067\200" +
    "\001\002\000\060\004\uffa3\006\uffa3\016\uffa3\017\uffa3\041" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\066\uffa3\067\uffa3\072\uffa3\101\uffa3\001\002" +
    "\000\056\004\uffa0\006\uffa0\016\uffa0\017\uffa0\041\uffa0\043" +
    "\170\044\173\045\167\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\056\uffa0\057\uffa0\060\uffa0\061\174\066" +
    "\172\067\uffa0\072\uffa0\101\uffa0\001\002\000\056\004\uffa1" +
    "\006\uffa1\016\uffa1\017\uffa1\041\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\174\066\172\067\uffa1\072" +
    "\uffa1\101\uffa1\001\002\000\056\004\uff9e\006\uff9e\016\uff9e" +
    "\017\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\174\066\172\067\uff9e\072\uff9e\101\uff9e\001" +
    "\002\000\026\024\030\025\047\026\037\042\015\055\012" +
    "\062\045\063\011\064\053\065\041\066\050\001\002\000" +
    "\026\024\030\025\047\026\037\042\015\055\012\062\045" +
    "\063\011\064\053\065\041\066\050\001\002\000\026\024" +
    "\030\025\047\026\037\042\015\055\012\062\045\063\011" +
    "\064\053\065\041\066\050\001\002\000\026\024\030\025" +
    "\047\026\037\042\015\055\012\062\045\063\011\064\053" +
    "\065\041\066\050\001\002\000\026\024\030\025\047\026" +
    "\037\042\015\055\012\062\045\063\011\064\053\065\041" +
    "\066\050\001\002\000\026\024\030\025\047\026\037\042" +
    "\015\055\012\062\045\063\011\064\053\065\041\066\050" +
    "\001\002\000\026\024\030\025\047\026\037\042\015\055" +
    "\012\062\045\063\011\064\053\065\041\066\050\001\002" +
    "\000\056\004\uffb0\006\uffb0\016\uffb0\017\uffb0\041\171\043" +
    "\170\044\173\045\167\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\056\uffb0\057\uffb0\060\uffb0\061\174\066" +
    "\172\067\uffb0\072\uffb0\101\uffb0\001\002\000\056\004\uffb4" +
    "\006\uffb4\016\uffb4\017\uffb4\041\171\043\170\044\173\045" +
    "\167\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\174\066\172\067\uffb4\072" +
    "\uffb4\101\uffb4\001\002\000\056\004\uffaf\006\uffaf\016\uffaf" +
    "\017\uffaf\041\171\043\170\044\173\045\167\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\174\066\172\067\uffaf\072\uffaf\101\uffaf\001" +
    "\002\000\056\004\uffb3\006\uffb3\016\uffb3\017\uffb3\041\171" +
    "\043\170\044\173\045\167\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\056\uffb3\057\uffb3\060\uffb3\061\174" +
    "\066\172\067\uffb3\072\uffb3\101\uffb3\001\002\000\056\004" +
    "\uffae\006\uffae\016\uffae\017\uffae\041\171\043\170\044\173" +
    "\045\167\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\174\066\172\067\uffae" +
    "\072\uffae\101\uffae\001\002\000\056\004\uffb1\006\uffb1\016" +
    "\uffb1\017\uffb1\041\171\043\170\044\173\045\167\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\174\066\172\067\uffb1\072\uffb1\101\uffb1" +
    "\001\002\000\056\004\uffb2\006\uffb2\016\uffb2\017\uffb2\041" +
    "\171\043\170\044\173\045\167\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\174\066\172\067\uffb2\072\uffb2\101\uffb2\001\002\000\030" +
    "\024\030\025\047\026\037\027\017\042\015\055\012\062" +
    "\045\063\011\064\053\065\041\066\050\001\002\000\012" +
    "\004\067\016\066\017\070\101\uffc5\001\002\000\050\004" +
    "\uffa5\016\uffa5\017\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffbf\055\101\061\uffa5\066\uffa5\072\uffa5\101\uffa5\001\002" +
    "\000\046\004\uffa6\016\uffa6\017\uffa6\041\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffc1\061\uffa6\066\uffa6\072\uffa6\101\uffa6\001" +
    "\002\000\050\004\uffa7\016\uffa7\017\uffa7\041\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffc0\055\076\061\uffa7\066\uffa7\072\uffa7" +
    "\101\uffa7\001\002\000\012\004\067\016\066\017\070\101" +
    "\uffc9\001\002\000\012\004\067\016\066\017\070\060\231" +
    "\001\002\000\004\101\163\001\002\000\054\002\uffd2\003" +
    "\uffd2\004\uffd2\005\235\006\234\007\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\040\uffd2\042" +
    "\uffd2\055\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\001\002\000\050\002\uffd3\003\uffd3\004\uffd3\007\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\040\uffd3\042\uffd3\055\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\001\002\000\004\060\242\001\002\000\030" +
    "\024\030\025\047\026\037\027\017\042\015\055\012\062" +
    "\045\063\011\064\053\065\041\066\050\001\002\000\012" +
    "\004\067\016\066\017\070\060\237\001\002\000\004\101" +
    "\163\001\002\000\054\002\uffce\003\uffce\004\uffce\005\235" +
    "\006\234\007\uffce\012\uffce\013\uffce\014\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\040\uffce\042\uffce\055\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000\050\002" +
    "\uffcf\003\uffcf\004\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\040\uffcf\042\uffcf\055" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002" +
    "\000\004\101\163\001\002\000\050\002\uffcd\003\uffcd\004" +
    "\uffcd\007\uffcd\012\uffcd\013\uffcd\014\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\040\uffcd\042\uffcd\055\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\001\002\000\004\055\245" +
    "\001\002\000\004\064\053\001\002\000\004\056\247\001" +
    "\002\000\004\060\250\001\002\000\004\101\251\001\002" +
    "\000\004\037\252\001\002\000\012\003\256\012\257\031" +
    "\046\064\053\001\002\000\012\003\uffe1\031\uffe1\040\uffe1" +
    "\064\uffe1\001\002\000\012\003\262\031\046\040\263\064" +
    "\053\001\002\000\012\003\uffe0\031\uffe0\040\uffe0\064\uffe0" +
    "\001\002\000\012\003\uffe5\031\uffe5\040\uffe5\064\uffe5\001" +
    "\002\000\004\101\260\001\002\000\004\040\261\001\002" +
    "\000\052\002\ufff4\003\ufff4\004\ufff4\007\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\042\ufff4\055\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\001\002\000\012\003\uffe4\031\uffe4\040\uffe4" +
    "\064\uffe4\001\002\000\052\002\ufff3\003\ufff3\004\ufff3\007" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\042\ufff3\055\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\001\002\000\012\003\uffe2" +
    "\031\uffe2\040\uffe2\064\uffe2\001\002\000\012\003\uffe3\031" +
    "\uffe3\040\uffe3\064\uffe3\001\002\000\024\004\uffb8\006\uffb8" +
    "\016\uffb8\017\uffb8\056\uffb8\057\uffb8\060\uffb8\067\uffb8\101" +
    "\uffb8\001\002\000\056\004\uffa4\006\uffa4\016\uffa4\017\uffa4" +
    "\041\uffa4\043\170\044\173\045\167\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\174\066\172\067\uffa4\072\uffa4\101\uffa4\001\002\000" +
    "\004\015\271\001\002\000\030\024\030\025\047\026\037" +
    "\027\017\042\015\055\012\062\045\063\011\064\053\065" +
    "\041\066\050\001\002\000\012\004\067\016\066\017\070" +
    "\060\273\001\002\000\004\101\163\001\002\000\050\002" +
    "\uffd1\003\uffd1\004\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\040\uffd1\042\uffd1\055" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002" +
    "\000\012\004\067\016\066\017\070\056\276\001\002\000" +
    "\056\004\uffac\006\uffac\016\uffac\017\uffac\041\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\056\uffac\057\uffac\060\uffac\061\uffac\066\uffac" +
    "\067\uffac\072\uffac\101\uffac\001\002\000\016\024\030\025" +
    "\047\026\037\062\045\063\011\065\041\001\002\000\004" +
    "\101\301\001\002\000\060\002\ufff5\003\ufff5\004\ufff5\007" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\034\ufff5\040\ufff5\042" +
    "\ufff5\055\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\050\006\035\007\006\013\026\015\051\016\030" +
    "\017\023\020\050\021\043\022\034\023\041\024\037\025" +
    "\017\026\007\031\005\032\012\033\015\034\032\035\033" +
    "\036\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\274\022\034" +
    "\023\041\024\037\032\012\033\055\035\057\036\056\001" +
    "\001\000\002\001\001\000\004\033\267\001\001\000\016" +
    "\022\034\023\266\032\012\033\055\035\057\036\056\001" +
    "\001\000\002\001\001\000\022\021\265\022\034\023\041" +
    "\024\037\032\012\033\055\035\057\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\243\001\001" +
    "\000\022\021\227\022\034\023\041\024\037\032\012\033" +
    "\055\035\057\036\056\001\001\000\002\001\001\000\022" +
    "\021\226\022\034\023\041\024\037\032\012\033\055\035" +
    "\057\036\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\013\026\015\141\016\030\017\023\020\050\021\043\022" +
    "\034\023\041\024\037\032\012\033\136\035\033\036\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\157\022\034\023\041" +
    "\024\037\032\012\033\055\035\057\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\103\001\001" +
    "\000\002\001\001\000\024\012\060\021\054\022\034\023" +
    "\041\024\037\032\012\033\055\035\057\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\063\022\034\023\041\024\037\032\012" +
    "\033\055\035\057\036\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\074\022\034\023\041\024\037" +
    "\032\012\033\055\035\057\036\056\001\001\000\022\021" +
    "\071\022\034\023\041\024\037\032\012\033\055\035\057" +
    "\036\056\001\001\000\022\021\070\022\034\023\041\024" +
    "\037\032\012\033\055\035\057\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\073\022\034\023" +
    "\041\024\037\032\012\033\055\035\057\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\076\021" +
    "\054\022\034\023\041\024\037\032\012\033\055\035\057" +
    "\036\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\101\021\054\022\034\023\041\024\037\032\012" +
    "\033\055\035\057\036\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\111\031\107\033\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\153\033\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\127\001\001\000\046\006\135\013" +
    "\026\015\051\016\030\017\023\020\050\021\043\022\034" +
    "\023\041\024\037\025\131\030\130\031\005\032\012\033" +
    "\015\034\133\035\033\036\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\144\001\001\000\002\001" +
    "\001\000\004\033\142\001\001\000\034\013\026\015\141" +
    "\016\030\017\023\020\050\021\043\022\034\023\041\024" +
    "\037\032\012\033\136\035\033\036\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\150\001" +
    "\001\000\046\006\151\013\026\015\051\016\030\017\023" +
    "\020\050\021\043\022\034\023\041\024\037\025\131\030" +
    "\130\031\005\032\012\033\015\034\133\035\033\036\025" +
    "\001\001\000\034\013\026\015\141\016\030\017\023\020" +
    "\050\021\043\022\034\023\041\024\037\032\012\033\136" +
    "\035\033\036\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\164\013\026" +
    "\015\051\016\030\017\023\020\050\021\043\022\034\023" +
    "\041\024\037\032\012\033\136\035\033\036\025\001\001" +
    "\000\034\013\026\015\141\016\030\017\023\020\050\021" +
    "\043\022\034\023\041\024\037\032\012\033\136\035\033" +
    "\036\025\001\001\000\002\001\001\000\016\022\034\023" +
    "\202\032\012\033\055\035\057\036\056\001\001\000\016" +
    "\022\034\023\201\032\012\033\055\035\057\036\056\001" +
    "\001\000\016\022\034\023\200\032\012\033\055\035\057" +
    "\036\056\001\001\000\022\021\176\022\034\023\041\024" +
    "\037\032\012\033\055\035\057\036\056\001\001\000\016" +
    "\022\034\023\175\032\012\033\055\035\057\036\056\001" +
    "\001\000\004\033\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\034" +
    "\023\220\032\012\033\055\035\057\036\056\001\001\000" +
    "\016\022\034\023\217\032\012\033\055\035\057\036\056" +
    "\001\001\000\016\022\034\023\216\032\012\033\055\035" +
    "\057\036\056\001\001\000\016\022\034\023\215\032\012" +
    "\033\055\035\057\036\056\001\001\000\016\022\034\023" +
    "\214\032\012\033\055\035\057\036\056\001\001\000\016" +
    "\022\034\023\213\032\012\033\055\035\057\036\056\001" +
    "\001\000\016\022\034\023\212\032\012\033\055\035\057" +
    "\036\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\222\022\034\023" +
    "\041\024\037\032\012\033\223\035\225\036\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\231\001\001\000\004\011\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\235\022\034\023\041" +
    "\024\037\032\012\033\055\035\057\036\056\001\001\000" +
    "\002\001\001\000\004\010\237\001\001\000\004\011\240" +
    "\001\001\000\002\001\001\000\004\010\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\253\025\254\031\005\033\110" +
    "\034\252\001\001\000\002\001\001\000\012\025\263\031" +
    "\005\033\110\034\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\271\022\034\023\041\024\037" +
    "\032\012\033\055\035\057\036\056\001\001\000\002\001" +
    "\001\000\004\010\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ChocoPyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ChocoPyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ChocoPyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The following fields and methods deal with error reporting
     * Avoid changing these unless you know what you are doing. */

    /** Node that accumulates error messages to be added to the Program
     *  node produced as a result. */
    public final Errors errors = new Errors(new ArrayList<>());
    
    // For generating compile error token


    private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

    /** Return the Program node that results from parsing the stream of
     *  tokens produced by lexical analysis.  In the case of syntax errors,
     *  the program may be empty, but will have error messages. */
    public Program parseProgram(boolean debug) {
        try {
            Symbol result = debug ? debug_parse() : parse();
            if (result == null || !(result.value instanceof Program)) {
                return new Program(new Location(0, 0), new Location(0, 0),
                                   new ArrayList<Declaration>(),
                                   new ArrayList<Stmt>(),
                                   errors);
            } else {
                return (Program) result.value;
            }
        } catch (RuntimeException excp) {
            throw excp;
        } catch (Exception excp) {
            String msg =
                String.format("Internal parser error detected: %s%n", excp);
            throw new AssertionError(msg);
        }
    }

    @Override
    public SymbolFactory getSymbolFactory() {
        return ((ChocoPyLexer) getScanner()).symbolFactory;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
                String token = symbl_name_from_id(cur_token.sym);
                //String text = ((ChocoPyLexer) getScanner()).yytext();
                String text = cur_token.value.toString();
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }
    
    public void syntax_error(Symbol cur_token, String reasons) {
                String token = symbl_name_from_id(cur_token.sym);
                //String text = ((ChocoPyLexer) getScanner()).yytext();
                String text = cur_token.value.toString();
                if(reasons != null){
                  text = text + '\n' + reasons;
                }
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        /* Do not die */
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ChocoPyParser$actions {



    /** Return a mutable list initially containing the single value ITEM. */
    <T> List<T> single(T item) {
        List<T> list = new ArrayList<>();
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** If ITEM is non-null, appends it to the end of LIST.  Then returns
     *  LIST. */
    <T> List<T> combine(List<T> list, T item) {
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** Return a mutable empty list. */
    <T> List<T> empty() {
        return new ArrayList<T>();
    }

    /** Return the leftmost non-whitespace location in NODES, or null if NODES
     *  is empty.  Assumes that the nodes of NODES are ordered in increasing
     *  order of location, from left to right. */
    ComplexSymbolFactory.Location getLeft(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;

            
        }
        Node first = nodes.get(0);
        return new ComplexSymbolFactory.Location(first.getLocation()[0],
                                                 first.getLocation()[1]);
    }

    ComplexSymbolFactory.Location getRight(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node last = nodes.get(nodes.size()-1);
        return new ComplexSymbolFactory.Location(last.getLocation()[2],
                                                 last.getLocation()[3]);
    }


  private final ChocoPyParser parser;

  /** Constructor */
  CUP$ChocoPyParser$actions(ChocoPyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action_part00000000(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ChocoPyParser$result;

      /* select the action based on the action number */
      switch (CUP$ChocoPyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		RESULT = start_val;
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ChocoPyParser$parser.done_parsing();
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_defs statements 
            {
              Program RESULT =null;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> def = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
           
            
            if (def.isEmpty()){
                RESULT=new Program(getLeft(s),sxright,def,s,errors);
            }
            else{
                RESULT=new Program(getLeft(def),sxright,def,s,errors);

            }

            
         
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_defs ::= program_defs var_def 
            {
              List<Declaration> RESULT =null;
		Location headxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location headxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> head = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location curr_var_defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_var_defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef curr_var_def = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(head,curr_var_def); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_defs",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_defs ::= program_defs class_def 
            {
              List<Declaration> RESULT =null;
		Location headxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location headxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> head = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location curr_class_defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_class_defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		ClassDef curr_class_def = (ClassDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(head,curr_class_def); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_defs",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_defs ::= program_defs func_def 
            {
              List<Declaration> RESULT =null;
		Location headxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location headxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> head = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location curr_fun_defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_fun_defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef curr_fun_def = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(head,curr_fun_def); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_defs",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_defs ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_defs",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= stmt_list 
            {
              List<Stmt> RESULT =null;
		Location curr_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> curr_stmt = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = curr_stmt; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_list ::= error 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_list ::= stmt_list stmt 
            {
              List<Stmt> RESULT =null;
		Location curr_stmt_lstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_stmt_lstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> curr_stmt_lst = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location curr_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt curr_stmt = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(curr_stmt_lst, curr_stmt); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt 
            {
              List<Stmt> RESULT =null;
		Location curr_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt curr_stmt = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(curr_stmt); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_list ::= stmt_list error 
            {
              List<Stmt> RESULT =null;
		Location curr_stmt_lstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_stmt_lstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> curr_stmt_lst = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = curr_stmt_lst; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_def ::= typedvar EQ literal NEWLINE 
            {
              VarDef RESULT =null;
		Location curr_typed_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location curr_typed_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		TypedVar curr_typed_var = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location curr_literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Literal curr_literal = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new VarDef(curr_typed_varxleft,curr_literalxright,curr_typed_var,curr_literal); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("var_def",26, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_def ::= CLASS identifier LPAREN identifier RPAREN COLON NEWLINE INDENT PASS NEWLINE DEDENT 
            {
              ClassDef RESULT =null;
		Location curr_classxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xleft;
		Location curr_classxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xright;
		Object curr_class = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).value;
		Location curr_id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location curr_id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Identifier curr_id1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location curr_id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location curr_id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		Identifier curr_id2 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location new_linexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location new_linexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Object new_line = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dedentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dedentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object dedent = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassDef(curr_classxleft,new_linexright,curr_id1,curr_id2,empty()); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_def",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_def ::= CLASS identifier LPAREN identifier RPAREN COLON NEWLINE INDENT class_declare DEDENT 
            {
              ClassDef RESULT =null;
		Location curr_classxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location curr_classxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Object curr_class = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location curr_id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xleft;
		Location curr_id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xright;
		Identifier curr_id1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).value;
		Location curr_id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location curr_id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		Identifier curr_id2 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location class_declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location class_declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> class_declaration = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dedentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dedentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object dedent = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassDef(curr_classxleft,class_declarationxright,curr_id1,curr_id2,class_declaration); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_def",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_def ::= DEF identifier LPAREN typedvar_list RPAREN COLON NEWLINE INDENT opt_declare_list stmt_list DEDENT 
            {
              FuncDef RESULT =null;
		Location curr_defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xleft;
		Location curr_defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xright;
		Object curr_def = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).value;
		Location identifier_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location identifier_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Identifier identifier_1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location typedvar_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location typedvar_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		List<TypedVar> typedvar_1 = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location colon_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location colon_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String colon_1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location new_line_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location new_line_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object new_line_1 = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location dec_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location dec_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Declaration> dec_list = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location st_list_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location st_list_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> st_list_1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dedentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dedentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object dedent = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 ClassType re_none = new ClassType(colon_1xright,colon_1xright,"<None>"); 
                                RESULT = new FuncDef(curr_defxleft,getRight(st_list_1),identifier_1,typedvar_1,re_none,dec_list,st_list_1); 
                            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_def ::= DEF error DEDENT 
            {
              FuncDef RESULT =null;
		 RESULT = null; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_def ::= DEF identifier LPAREN typedvar_list RPAREN ARROW type COLON NEWLINE INDENT opt_declare_list stmt_list DEDENT 
            {
              FuncDef RESULT =null;
		Location curr_defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xleft;
		Location curr_defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xright;
		Object curr_def = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).value;
		Location identifier_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xleft;
		Location identifier_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xright;
		Identifier identifier_1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).value;
		Location typedvar_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location typedvar_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		List<TypedVar> typedvar_1 = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location type1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location type1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		TypeAnnotation type1 = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location dec_list_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location dec_list_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Declaration> dec_list_1 = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location st_list_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location st_list_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> st_list_1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dedentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dedentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object dedent = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new FuncDef(curr_defxleft,getRight(st_list_1),identifier_1,typedvar_1,type1,dec_list_1,st_list_1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typedvar ::= identifier COLON type 
            {
              TypedVar RESULT =null;
		Location curr_id_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location curr_id_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Identifier curr_id_1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location type_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location type_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypeAnnotation type_1 = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new TypedVar(curr_id_1xleft,type_1xright,curr_id_1,type_1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar",23, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= TRUE 
            {
              Literal RESULT =null;
		Location literal_nonexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location literal_nonexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		boolean literal_none = (boolean)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(literal_nonexleft, literal_nonexright, literal_none); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= FALSE 
            {
              Literal RESULT =null;
		Location literal_nonexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location literal_nonexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		boolean literal_none = (boolean)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(literal_nonexleft, literal_nonexright, literal_none); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= NONE 
            {
              Literal RESULT =null;
		Location literal_nonexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location literal_nonexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object literal_none = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new NoneLiteral(literal_nonexleft, literal_nonexright); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= STRING 
            {
              Literal RESULT =null;
		Location stringxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location stringxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String string = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new StringLiteral(stringxleft, stringxright, string.substring(1,string.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= IDSTRING 
            {
              Literal RESULT =null;
		Location id_stringxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location id_stringxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String id_string = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new StringLiteral(id_stringxleft, id_stringxright, id_string.substring(1,id_string.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		Location integer_nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location integer_nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer integer_n = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(integer_nxleft, integer_nxright, integer_n); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opt_declare_list ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_declare_list",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opt_declare_list ::= opt_declare_list declare 
            {
              List<Declaration> RESULT =null;
		Location declar_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location declar_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> declar_list = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(declar_list,decl); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_declare_list",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		Location curr_id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String curr_id1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new Identifier(curr_id1xleft,curr_id1xright,curr_id1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("identifier",25, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // class_declare ::= error 
            {
              List<Declaration> RESULT =null;
		 RESULT=empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // class_declare ::= class_declare error 
            {
              List<Declaration> RESULT =null;
		Location cl_declrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cl_declrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> cl_declr = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = cl_declr; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // class_declare ::= class_declare var_def 
            {
              List<Declaration> RESULT =null;
		Location cl_declrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cl_declrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> cl_declr = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(cl_declr,vd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // class_declare ::= class_declare func_def 
            {
              List<Declaration> RESULT =null;
		Location cl_declrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cl_declrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> cl_declr = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                                    if (fd!=null){
                                        RESULT=combine(cl_declr,fd);
                                    }
                                    else{
                                        RESULT=cl_declr; 
                                    }
                        
                                 
                                 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // class_declare ::= var_def 
            {
              List<Declaration> RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(vd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_declare ::= func_def 
            {
              List<Declaration> RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(fd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declare ::= NONLOCAL identifier NEWLINE 
            {
              Declaration RESULT =null;
		Location non_localxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location non_localxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Object non_local = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location curr_id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Identifier curr_id1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new NonLocalDecl(non_localxleft,curr_id1xright,curr_id1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declare ::= GLOBAL identifier NEWLINE 
            {
              Declaration RESULT =null;
		Location curr_globalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location curr_globalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Object curr_global = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location curr_id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Identifier curr_id1 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new GlobalDecl(curr_globalxleft,curr_id1xright,curr_id1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declare ::= func_def 
            {
              Declaration RESULT =null;
		Location curr_fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef curr_fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = curr_fd; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declare ::= var_def 
            {
              Declaration RESULT =null;
		Location curr_vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef curr_vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = curr_vd; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typedvar_list ::= 
            {
              List<TypedVar> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typedvar_list ::= typedvar_list COMMA error 
            {
              List<TypedVar> RESULT =null;
		Location typedvar_lstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location typedvar_lstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<TypedVar> typedvar_lst = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		 RESULT = typedvar_lst; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typedvar_list ::= typedvar_list COMMA typedvar 
            {
              List<TypedVar> RESULT =null;
		Location typedvar_lstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location typedvar_lstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<TypedVar> typedvar_lst = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location curr_typed_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_typed_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypedVar curr_typed_var = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(typedvar_lst,curr_typed_var); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typedvar_list ::= typedvar 
            {
              List<TypedVar> RESULT =null;
		Location curr_typed_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_typed_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypedVar curr_typed_var = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(curr_typed_var); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= LINDEX type RINDEX 
            {
              TypeAnnotation RESULT =null;
		Location left_index_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location left_index_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String left_index_ = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location type_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location type_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		TypeAnnotation type_1 = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location right_index_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location right_index_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String right_index_ = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ListType(left_index_xleft,right_index_xright,type_1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= IDSTRING 
            {
              TypeAnnotation RESULT =null;
		Location curr_ids_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_ids_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String curr_ids_ = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassType(curr_ids_xleft,curr_ids_xright,curr_ids_.substring(1,curr_ids_.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= IDENTIFIER 
            {
              TypeAnnotation RESULT =null;
		Location curr_id_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location curr_id_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String curr_id_ = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassType(curr_id_xleft,curr_id_xright,curr_id_); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= smpl_statement NEWLINE 
            {
              Stmt RESULT =null;
		Location curr_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location curr_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Stmt curr_stmt = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = curr_stmt; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= IF expr COLON block elif_optional_list 
            {
              Stmt RESULT =null;
		Location operation_if_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location operation_if_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object operation_if_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location expr_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location expr_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location block_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location block_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> block_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location elif_optional_list_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location elif_optional_list_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> elif_optional_list_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfStmt(operation_if_xleft, getRight(block_), expr_, block_, elif_optional_list_); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= IF expr COLON block 
            {
              Stmt RESULT =null;
		Location operation_if_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location operation_if_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object operation_if_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location expr_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location block_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location block_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> block_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfStmt(operation_if_xleft, getRight(block_), expr_, block_, empty()); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= FOR identifier IN expr COLON block 
            {
              Stmt RESULT =null;
		Location for_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location for_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		Object for_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location curr_id_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location curr_id_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Identifier curr_id_ = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location expr_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location block_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location block_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> block_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ForStmt(for_xleft, getRight(block_), curr_id_, expr_, block_); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= WHILE expr COLON block 
            {
              Stmt RESULT =null;
		Location while_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location while_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object while_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location expr_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location block_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location block_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> block_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new WhileStmt(while_xleft, getRight(block_), expr_, block_); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elif_optional_list ::= ELIF expr COLON block elif_optional_list 
            {
              List<Stmt> RESULT =null;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> block = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location elif_optional_list_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location elif_optional_list_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> elif_optional_list_ = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 Stmt stmt = new IfStmt(operatorxleft,getRight(elif_optional_list_),expr,block,elif_optional_list_); RESULT = single(stmt); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_optional_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elif_optional_list ::= ELIF expr COLON block 
            {
              List<Stmt> RESULT =null;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> block = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 Stmt stmt =new IfStmt(operatorxleft,getRight(block),expr,block,empty()); RESULT = single(stmt); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_optional_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elif_optional_list ::= ELSE COLON block 
            {
              List<Stmt> RESULT =null;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> block = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT=block; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_optional_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= NEWLINE INDENT stmt_list DEDENT 
            {
              List<Stmt> RESULT =null;
		Location stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> stmt_list = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = stmt_list; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // smpl_statement ::= expr_stmt 
            {
              Stmt RESULT =null;
		Location expr_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt expr_stmt = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = expr_stmt; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("smpl_statement",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // smpl_statement ::= RETURN 
            {
              Stmt RESULT =null;
		Location return_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location return_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object return_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ReturnStmt(return_xleft,return_xright,null); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("smpl_statement",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // smpl_statement ::= RETURN expr 
            {
              Stmt RESULT =null;
		Location return_xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location return_xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Object return_ = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ReturnStmt(return_xleft,exprxright,expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("smpl_statement",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // smpl_statement ::= assign_stmt 
            {
              Stmt RESULT =null;
		Location assign_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location assign_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt assign_stmt = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = assign_stmt; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("smpl_statement",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // smpl_statement ::= PASS 
            {
              Stmt RESULT =null;
		
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("smpl_statement",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_stmt ::= expr 
            {
              Stmt RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ExprStmt(exprxleft, exprxright, expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_stmt ::= assign_targets EQ expr 
            {
              Stmt RESULT =null;
		Location assign_targetsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location assign_targetsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> assign_targets = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new AssignStmt(assign_targetsxleft,exprxright,assign_targets,expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assign_targets ::= identifier 
            {
              List<Expr> RESULT =null;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier identifier = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(identifier); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_targets ::= index_expr 
            {
              List<Expr> RESULT =null;
		Location index_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location index_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr index_expr = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(index_expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assign_targets ::= member_expr 
            {
              List<Expr> RESULT =null;
		Location member_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location member_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr member_expr = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(member_expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign_targets ::= assign_targets EQ index_expr 
            {
              List<Expr> RESULT =null;
		Location assign_targetsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location assign_targetsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> assign_targets = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location index_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location index_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr index_expr = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(assign_targets,index_expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assign_targets ::= assign_targets EQ member_expr 
            {
              List<Expr> RESULT =null;
		Location assign_targetsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location assign_targetsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> assign_targets = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location member_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location member_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr member_expr = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(assign_targets,member_expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assign_targets ::= assign_targets EQ identifier 
            {
              List<Expr> RESULT =null;
		Location assign_targetsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location assign_targetsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> assign_targets = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier identifier = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(assign_targets,identifier); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_list ::= expr 
            {
              List<Expr> RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_list ::= expr_list COMMA error 
            {
              List<Expr> RESULT =null;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> expr_list = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		 RESULT = expr_list; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_list ::= expr_list COMMA expr 
            {
              List<Expr> RESULT =null;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> expr_list = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(expr_list,expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_list ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= cexpr 
            {
              Expr RESULT =null;
		Location c_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location c_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr c_expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = c_expr; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new UnaryExpr(operatorxleft,exprxright,operator,expr); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr IF expr ELSE expr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location expr_3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_3 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfExpr(expr_1xleft,expr_3xright,expr_2,expr_1,expr_3); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cexpr ::= tempexpr 
            {
              Expr RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cexpr ::= cexpr NEQ tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cexpr ::= cexpr GE tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cexpr ::= cexpr LT tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cexpr ::= cexpr GT tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cexpr ::= cexpr EQEQ tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cexpr ::= cexpr IS tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cexpr ::= cexpr LE tempexpr 
            {
              Expr RESULT =null;
		Location expr_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location expr_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr expr_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location expr_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location expr_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expr_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(expr_1xleft,expr_2xright,expr_1,operator,expr_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tempexpr ::= binary_expr 
            {
              Expr RESULT =null;
		Location exprexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expre = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = expre; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tempexpr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location exprexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exprexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr expre = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = expre; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tempexpr ::= identifier LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Identifier identifier = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lprnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lprnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lprn = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> expr_list = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rprnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rprnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rprn = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new CallExpr(identifierxleft, rprnxright, identifier, expr_list); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tempexpr ::= literal 
            {
              Expr RESULT =null;
		Location literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Literal literal = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = literal; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tempexpr ::= LINDEX expr_list RINDEX 
            {
              Expr RESULT =null;
		Location lindexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lindexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lindex = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> expr_list = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rindexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rindexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rindex = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ListExpr(lindexxleft, rindexxright, expr_list); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tempexpr ::= member_expr LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		Location member_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location member_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		MemberExpr member_expr = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lprnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lprnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lprn = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> expr_list = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rprnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rprnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rprn = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new MethodCallExpr(member_exprxleft, rprnxright, member_expr, expr_list); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tempexpr ::= member_expr 
            {
              Expr RESULT =null;
		Location member_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location member_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr member_expr = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = member_expr; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tempexpr ::= index_expr 
            {
              Expr RESULT =null;
		Location index_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location index_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr index_expr = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = index_expr; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tempexpr ::= identifier 
            {
              Expr RESULT =null;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier identifier = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = identifier; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tempexpr ::= MINUS tempexpr 
            {
              Expr RESULT =null;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exprexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exprexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr expre = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new UnaryExpr(operatorxleft, exprexright, operator, expre); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("tempexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // index_expr ::= tempexpr LINDEX expr RINDEX 
            {
              IndexExpr RESULT =null;
		Location p_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location p_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr p_expr1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lindex_operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lindex_operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lindex_operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location p_expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location p_expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr p_expr2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rindex_operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rindex_operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rindex_operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IndexExpr(p_expr1xleft, rindex_operatorxright, p_expr1, p_expr2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",28, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // member_expr ::= tempexpr DOT identifier 
            {
              MemberExpr RESULT =null;
		Location p_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location p_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr p_expr = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier identifier = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new MemberExpr(p_exprxleft, identifierxright, p_expr, identifier); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("member_expr",27, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binary_expr ::= tempexpr MULT tempexpr 
            {
              Expr RESULT =null;
		Location exp_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exp_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr exp_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exp_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exp_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr exp_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(exp_1xleft,exp_2xright,exp_1,operator,exp_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binary_expr ::= tempexpr PLUS tempexpr 
            {
              Expr RESULT =null;
		Location exp_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exp_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr exp_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exp_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exp_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr exp_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(exp_1xleft,exp_2xright,exp_1,operator,exp_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binary_expr ::= tempexpr DIV tempexpr 
            {
              Expr RESULT =null;
		Location exp_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exp_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr exp_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exp_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exp_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr exp_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(exp_1xleft,exp_2xright,exp_1,operator,exp_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binary_expr ::= tempexpr MOD tempexpr 
            {
              Expr RESULT =null;
		Location exp_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exp_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr exp_1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String operator = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exp_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exp_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr exp_2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(exp_1xleft,exp_2xright,exp_1,operator,exp_2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ChocoPyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
              return CUP$ChocoPyParser$do_action_part00000000(
                               CUP$ChocoPyParser$act_num,
                               CUP$ChocoPyParser$parser,
                               CUP$ChocoPyParser$stack,
                               CUP$ChocoPyParser$top);
    }
}

}
